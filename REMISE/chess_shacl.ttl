@prefix chess: <https://g33kex.github.io/ChessRDF/Chess.xml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix schema: <https://schema.org/> .
@prefix wiki: <https://www.wikidata.org/wiki/>.
@prefix foaf: <http://xmlns.com/foaf/spec/#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

## Contraintes

# 1. Une pièce doit avoir une et une seule couleur: blanche ou noire

chess:PieceShape a sh:NodeShape ;
  sh:targetClass chess:Piece ;
  sh:property [
    sh:path chess:color ;
    sh:minCount 1;
    sh:maxCount 1;
    sh:in (chess:Black chess:White) ;
  ] .

# 2. Les coordonnées des cases de l'échéquier doivent être composées d'une lettre de a à h suivie d'un chiffre de 1 à 8. 

chess:SquareShape a sh:NodeShape ;
  sh:targetClass chess:Square ;
  sh:property [
    sh:path chess:coordinates ;
    sh:minCount 1;
    sh:maxCount 1;
    sh:pattern "^[a-h][1-8]$"
  ] .

# 3. Une case ne peut avoir qu'une seule pièce maximum, qui doit être un cavalier, un pion, un fou, une tour, une reine ou un roi

chess:SquareShape a sh:NodeShape ;
  sh:targetClass chess:Square ;
  sh:property [
    sh:path ( chess:hasPiece rdf:type );
    sh:maxCount 1;
    sh:in (chess:Knight chess:Pawn chess:Bishop chess:Rook chess:Queen chess:King)
  ].

# 4. Une séquence doit être une liste de mouvements

chess:SequenceShape a sh:NodeShape ;
  sh:targetClass chess:Sequence ;
  sh:property [
    sh:path ( rdf:first rdf:type ) ;
    sh:hasValue chess:Move ;
    sh:minCount 1 ;
  ] ;
  sh:or (
    sh:property [
      sh:path ( rdf:rest rdf:type ) ;
      sh:hasValue chess:Sequence ;
      sh:minCount 1;
    ]
    sh:property [
      sh:path rdf:rest ;
      sh:hasValue rdf:nil ;
      sh:minCount 1
    ]
  ).

# 5. La notation d'un mouvement doit être composé de deux coordonnées de cases, suivi éventuellement d'une lettre s'il y a promotion 

chess:MoveShape2 a sh:NodeShape ;
  sh:targetClass chess:Move ;
  sh:property [
    sh:path chess:notation ;
    sh:minCount 1;
    sh:maxCount 1;
    sh:datatype xsd:string ;
    sh:pattern "^([a-h][1-8]){2}.?$"
  ] .

## Règles d'inférence

# 1. Un movement castleQueenSide ou castleKingSide est aussi un mouvement castle

chess:MoveShape a sh:NodeShape ;
  sh:rule [
    a sh:TripleRule ;
    sh:subject sh:this ;
    sh:predicate chess:castle ;
    sh:object xsd:true ;
    sh:condition [
      sh:or (
        [
          sh:path chess:castleQueenSide ;
          sh:minCount 1 ;
          sh:hasValue xsd:true ; 
        ]
        [
          sh:path chess:castleKingSide ;
          sh:minCount 1 ;
          sh:hasValue xsd:true ; 

        ]
      )
    ] ;
  ] .

# 2. La promotion d'un pion donne une pièce de la même couleur que ce pion

chess:PieceShape a sh:NodeShape ;
  sh:rule [
    a sh:TripleRule ;
    sh:subject sh:this ;
    sh:predicate chess:color ;
    sh:object chess:White ;
    sh:condition [
      sh:property [
        sh:path ( [ sh:inversePath chess:pawnPromotion ] chess:piece chess:color ) ;
        sh:hasValue chess:White ;
      ] ;
    ] ;
  ] ;
  sh:rule [
    a sh:TripleRule ;
    sh:subject sh:this ;
    sh:predicate chess:color ;
    sh:object chess:Black ;
    sh:condition [
      sh:property [
        sh:path ( [ sh:inversePath chess:pawnPromotion ] chess:piece chess:color ) ;
        sh:hasValue chess:Black ;
      ] ;
    ] ;
  ] .
